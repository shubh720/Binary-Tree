#include<iostream>
#include<queue>
using namespace std;

// node : that contains data and 2 pointers left & right. 
struct node{
 int data;
 node* left;
 node* right;
 
  // initialize left,right,data
  node(int data){
      this->data = data;
      left=right=NULL;
  }
};

// let's create a binary tree that returns address of the root node,if exist.
node* createBinaryTree(node* root){
int data;
cin>>data;
  if(data==-1){
      return NULL;
  } 
// came here it means data is not -1 ,hence create node for data entered
root = new node(data);
// ab root bhi bann gya now ask for data to be inserted in left or right
root->left = createBinaryTree(root->left);
root->right = createBinaryTree(root->right); 

 return root;
}

// non-recursive create binary tree
node* createBTree(node* root){
int data;
cin>>data;
  if(data!=-1){
      // create node or tree
     root = new node(data); 
  }else{
      return NULL;
  }   
queue<node* >q;
q.push(root);
 
   while(!q.empty()){
      node* top = q.front();
      q.pop();
   // left     
         cin>>data;
          if(data!=-1){
              // create & link them
            node* temp = new node(data);
            top->left = temp;
            q.push(temp);  
          }
   // right       
          cin>>data;
          if(data!=-1){
              // create & link them
            node* temp = new node(data);
            top->right = temp;
            q.push(temp);  
          } 
   } 
// queue is empty now,only root is left
 return root;   
}

// preorder printing
void preOrder(node* root){
  if(root==NULL){
      // root is NULL that means no existence of tree happened
      return;
  }
cout<<root->data<<" "; // done root printing, let's call left & right for recursive printing
preOrder(root->left); 
preOrder(root->right);
return;
}

// inorder printing
void InOrder(node* root){
 if(root==NULL){
     return;
 }
// inorder : LEFT ROOT RIGHT 
InOrder(root->left);
cout<<root->data<<" ";
InOrder(root->right);
return;
}

// postorder printing
void postorder(node* root){
  if(root==NULL){
      return;
  }
// postorder : LEFT RIGHT ROOT
postorder(root->left);
postorder(root->right);
cout<<root->data<<" ";
return;
}

// level wise printing non-recursive.
void levelOrderPrint(node* root){
 // access element through root & put in queue side by side
  if(root==NULL){
      return;
  }
queue<node* >q;
q.push(root);
   while(!q.empty()){
     node* top = q.front();
     q.pop();
     cout<<top->data<<" ";
  // root id done let's push into left and right
    if(top->left!=NULL){
       q.push(top->left);
    }
    if(top->right!=NULL){
       q.push(top->right);
    }
   }
return;
}

//print each level in different lines
void levelPrintIndifflines(node* root){
   if(root==NULL){
       return;
   }
queue<node* >q,q1;
q.push(root);
   // while both are not empty
     while(!q.empty() || !q1.empty()){
           while(!q.empty()){
             node* top = q.front();
             q.pop();
             cout<<top->data<<" ";
               if(top->left!=NULL){
                   q1.push(top->left);
               }
               if(top->right!=NULL){
                   q1.push(top->right);
               }
           }
   // work done 
     cout<<endl;
         while(!q1.empty()){
             node* top = q1.front();
             q1.pop();
             cout<<top->data<<" ";
               if(top->left!=NULL){
                   q.push(top->left);
               }
               if(top->right!=NULL){
                   q.push(top->right);
               }
           }
      cout<<endl;
     }
return;
}

// degree of root node
int degree(node* root){
 return (bool)root->left + (bool)root->right;
}
 
int height(node* root){
 if(root==NULL){
     return 0;
 }
// if root not NULL then exist
int leftheight = height(root->left);
int rightheight = height(root->right);
int maxheight = max(leftheight,rightheight);
return maxheight+1;

} 

// number of nodes present in tree
int count(node* root){
 if(root==NULL){
     return 0;
 }

int lcount = count(root->left);
int rcount = count(root->right);
return lcount+rcount+1; // +1 for root node count 
}

// sum of all nodes
int sumOfAllNodes(node* root){
  if(root==NULL){
      return 0;
  }

 return sumOfAllNodes(root->left) + sumOfAllNodes(root->right) + root->data;  
}

// number of nodes above entered number
int totalNodesGreaterThanK(node* root,int k){  
  if(root==NULL){
      return 0;
  }  
 
int lmax = totalNodesGreaterThanK(root->left,k);
int rmax = totalNodesGreaterThanK(root->right,k);
  if(root->data > k){
      return lmax + rmax + 1;
  }
 return lmax+rmax;  
}

//kth level printing
void printAtlevelK(node* root,int k){
   // if(!root) or if(root==NULL) same
    if(root==NULL){
        return;
    }
    if(k==0){
        cout<<root->data<<" ";
        return;
    }
    printAtlevelK(root->left,k-1);
    printAtlevelK(root->right,k-1);
    return;
}

// diameter - longest chain present
int diameter(node* root){
 if(root==NULL){
     return 0;
 }

int lh = height(root->left);
int rh = height(root->right);
int th = lh+rh+1; // height + passing by root
int ld = diameter(root->left);
int rd = diameter(root->right);
int td = max(ld,rd); // when root is not helpful
return max(th,td);
}

// in diameter code : same process is repeated for height & for diameter so, use pair to calc in one traversal
pair<int,int> diameterandheight(node* root){
 if(root==NULL){
     return make_pair(0,0);
 }

pair<int,int> left = diameterandheight(root->left);
pair<int,int> right = diameterandheight(root->right);
int lh = left.first;
int rh = right.first;
int ld = left.second;
int rd = right.second;
int th = lh+rh+1;
int td = max(th,max(ld,rd));
  return make_pair(th,td);    
}

//diameter and height code using class
class reference{
    public :
        int height;
        int diameter;
};  // actual meaning of     pair<int,int>

reference heightdiameter(node* root){
 reference r; // r : object to access class elements
  if(root==NULL){
      r.height = r.diameter = 0;
      return r;
  }  

reference left = heightdiameter(root->left);
reference right = heightdiameter(root->right);

r.height = max(left.height , right.height)+1;
r.diameter = max(left.height + right.height +1,max(left.diameter,right.diameter));
 return r;
} 

int main(){
node* root = NULL;
//root = createBinaryTree(root);
root = createBTree(root);
cout<<"PREORDER : ";
preOrder(root);
cout<<endl;
cout<<"DEGREE : "<<degree(root)<<endl; // number of children of parent node
cout<<"HEIGHT : "<<height(root)<<endl;
cout<<"DIAMETER : "<<diameter(root)<<endl;
reference r = heightdiameter(root);
cout<<r.height<<", "<<r.diameter<<endl;
cout<<"TOTAL NODES : "<<count(root)<<endl;  
cout<<"ELEMENTS AT Kth PoSITION : ";
int k;
cin>>k;
printAtlevelK(root,k);
cout<<endl;
cout<<"************************"<<endl;
levelPrintIndifflines(root);
cout<<"************************"<<endl;
cout<<"SUM OF ALL NODES : "<<sumOfAllNodes(root)<<endl;
int f;
cin>>f;
cout<<"NUMBER OF NODES greater than "<<f<<" : "<<totalNodesGreaterThanK(root,f)<<endl;

   return 0; 
}
